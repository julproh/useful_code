Правила форматирования кода:

    На протяжении всего решения шаг отступа устроен одинаково, причём это либо четыре пробела, либо табуляция соответствующей ширины;
    Вокруг знаков бинарных операций (арифметика, сравнения, битовые, логические операции) ставятся пробелы. Сюда относятся и операторы сдвига << и >>.
    Между знаком унарной операции (унарный +, унарный -, ++, --, ~, !, разыменование *, взятие адреса &) и выражением, к которому она применяется, пробел не ставится;
    Все константы больше 1 (например, ограничение на размер массива) должны быть сохранены в константную переменную. Кроме исключительных ситуаций, как в нижепредставленных примере.
    Запрещен копипаст. Используйте функции.
    Вокруг присваиваний ставятся пробелы. Операторы вида +=, *= относятся к присваиваниям;
    Процедуры, функции и другие смысловые блоки разделяются пустыми строками;
    После запятой, точки с запятой и двоеточия ставится пробел, а перед ними - не ставится;
    Ширина текста программы (то есть количество символов в одной строке кода) не должна превышать 80-100 символов;
    Каждый новый оператор должен находиться в отдельной строке.
    Между именем функции и скобками пробел не ставится, с внутренней стороны скобок пробел не ставится.
    В операторах if, while, do-while, for после ключевого слова ставится пробел.
    В операторах if, while, do-while, for обязательно заключать тело цикла в фигурные скобки (составной оператор), даже если тело — единственный оператор;
    Обратите внимание на форматирование if-then-else в примерах;
    Идентификаторы должны иметь длинные (но в меру), осмысленные названия. Исключения допускаются только для счетчиков в циклах (i, j), а также для размеров исходных данных (N, M). Переменная flag, а также переменные с цифрами на конце запрещены.
    В идентификаторах используются только английские слова, транслитерация не допускается.
    Переменные объявляются как можно ближе к месту первого использования, т. е. как можно позже. В частности, счётчик цикла for обычно можно объявить в его первой секции.
    При "египетском" (как в первом примере) стиле фигурных скобок пробел перед открывающей скобкой ставится всегда.

Старайтесь разбивать Вашу задачу на маленькие логические блоки. Пишите больше функций.
Идеальный main выглядит так: writeOutput(solveProblem(readInput(...)))
Примеры правильно отформатированных программ:

#include <iostream>

using namespace std;

int sum(int a, int b) {
   return a + b;
}

int main(int argc, char** argv) {
    int a;
    int b;
    int s;

    cin >> a >> b;

    s = 0;
    if (a < 0) {
        a = -a;
        if (b < 0) {
            b = -b;
            s = a + b;
        } else {
            while (s <= 0) {
                switch (a) {
                case 1: 
                    s += 3;
                    break;
                case 2:
                    s -= 4;
                    a -= 1;
                    break;
                default:
                    s = 1;
                }
            }
        }
    } else if (b < 0) {
        b = -b;
        s = (a + b) * (a - b);
    } else {
        s = sum(a, b) * sum(a, b);
    }

    cout << s;

    return 0;
}

Или так:

#include <stdio.h>

int sum(int a, int b)
{
    return a + b;
}

int main(int argc, char** argv)
{
    int a;
    int b;
    int s;

    scanf("%d%d", &a, &b);

    s = 0;
    if (a < 0)
    {
        a = -a;
        if (b < 0)
        {
            b = -b;
            s = a + b;
        }
        else
        {
            while (s <= 0)
            {
                switch (a)
                {
                case 1: 
                    s += 3;
                    break;
                case 2:
                    s -= 4;
                    a -= 1;
                    break;
                default:
                    s = 1;
                }
            }
        }
    }
    else
    {
        if (b < 0)
        {
            b = -b;
            s = (a + b) * (a - b);
        }
        else
        {
            s = sum(a, b) * sum(a, b);
        }
    }

    printf("%d\n", s);

    return 0;
}
